/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scratchgrader;

import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import scratchgrader.DataVariable;
import scratchgrader.ScratchGrader;
import scratchgrader.ScratchLoader;
import scratchgrader.Sprite;

/**
 *
 * @author cyber
 */
public class ScratchGraderUI extends javax.swing.JFrame {

    DefaultTreeModel model;
    DefaultMutableTreeNode selectedNode;
    DefaultMutableTreeNode root;
    private JTree tree;
    /**
     * Creates new form ScratchGraderUI
     */
    public ScratchGraderUI() {
        initComponents();
        model = (DefaultTreeModel) scratchTree.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        browseBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        gradeBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        browseFlbl = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        scratchTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Century", 0, 24)); // NOI18N
        jLabel1.setText("Scratch Grader");

        browseBtn.setText("Browse Files");
        browseBtn.setActionCommand("BrowseButton");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Please select the directory of the scratch files.");

        gradeBtn.setText("Grade");
        gradeBtn.setActionCommand("gradeBut");
        gradeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit");
        exitBtn.setActionCommand("ExitBut");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        scratchTree.setVisible(false);
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        scratchTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(scratchTree);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(gradeBtn)
                                .addGap(50, 50, 50)
                                .addComponent(exitBtn))
                            .addComponent(browseBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(browseFlbl))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(65, 65, 65))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(27, 27, 27)
                .addComponent(browseBtn)
                .addGap(7, 7, 7)
                .addComponent(browseFlbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gradeBtn)
                    .addComponent(exitBtn))
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        JFileChooser choose = new JFileChooser();
        choose.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        choose.setAcceptAllFileFilterUsed(false);

        if (choose.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            browseFlbl.setText(choose.getSelectedFile().toString());
        }


    }//GEN-LAST:event_browseBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(1);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void gradeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeBtnActionPerformed
        scratchTree.setVisible(true);

        // Adds the root node as the browserText box.
        root = (DefaultMutableTreeNode) model.getRoot();
        root.setUserObject(browseFlbl.getText());
        
        // Call Scratch grading and add new nodes for graded information.
        gradeScratchDir(browseFlbl.getText());

        tree = new JTree(root);
        add(tree);
    }//GEN-LAST:event_gradeBtnActionPerformed

    /**
     * gradeScratchDir - Grade a folder.
     * @param dir is string used to point to the scratch directory.
     */
    public void gradeScratchDir(String dir) {
        ScratchLoader loader = new ScratchLoader(dir);
        // If wrong input, it will throw an exception and crash the program
        // TODO: Have the user type in another directory again.
        List<Path> sb2Contents = loader.
                getFilePathsSB2(loader.getFileInputDir());
        loader.convertToZip(sb2Contents);
        loader.unzipFile();
        List<Path> projects = loader.
                getDirectoryContents(loader.getFileInputDir());

        for (int i = 0; i < projects.size(); i++) {
            File file = new File(projects.get(i).toString());
            if (file.isDirectory()) {
                if (loader.checkMediaReferences(file.getAbsolutePath())) {
                    ScratchGrader grader = new ScratchGrader(
                            file.getAbsolutePath());
                    List<Sprite> sprites = new ArrayList<Sprite>();
                    sprites = grader.getListOfSprites();
                    List<DataVariable> data = grader.getAllSpritesVariables();
                    
                    DefaultMutableTreeNode project = new DefaultMutableTreeNode(grader.getProjectName());
                    
                    root.add(project);
                    
                    project.add(new DefaultMutableTreeNode("Total Scripts: " +  grader.getTotalScriptCount()));
                    project.add(new DefaultMutableTreeNode("Total length of the scripts: " +  grader.getCombinedScriptLength()));
                    project.add(new DefaultMutableTreeNode("Total Data Variables: " + data.size()));
                    
                    for (int j = 0; j < data.size(); j++) {                    
                        project.add(new DefaultMutableTreeNode("Variables: " + data.get(j).getName()));
                        project.add(new DefaultMutableTreeNode("Uses: " + data.get(j).getUses()));
                        project.add(new DefaultMutableTreeNode("Global: " + data.get(j).getGlobal().toString()));
                    }

                    List<String> categoryBlocks
                            = grader.getAllSprintcategorys();

                    for (int j = 0; j < categoryBlocks.size(); j++) {
                        project.add(new DefaultMutableTreeNode("Category & Uses: " + categoryBlocks.get(j)));
                    }
                }
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScratchGraderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScratchGraderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScratchGraderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScratchGraderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScratchGraderUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseBtn;
    private javax.swing.JTextField browseFlbl;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton gradeBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree scratchTree;
    // End of variables declaration//GEN-END:variables
}
